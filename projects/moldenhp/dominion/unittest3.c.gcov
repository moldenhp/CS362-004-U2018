        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// unittest3.c 
        -:    2:// This tests the shuffle() function 
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:
        -:   11:// global count of test failures
        -:   12:int failureCount = 0;
        -:   13:
        -:   14:// my own assertTrue function - this checkes if two ints are equal or not
        3:   15:void assertTrue(int a, int b) {
        3:   16:    if (a == b) {
        3:   17:        printf("Test: SUCCESSFULLY COMPLETED\n");
        -:   18:    }
        -:   19:    else {
    #####:   20:        printf("Test: FAILED\n");
    #####:   21:        failureCount++;
        -:   22:    }
        3:   23:}
        -:   24:
        -:   25:// runs the tests
        1:   26:int main () {
        1:   27:    int numbPlayers = 2;
        1:   28:    int player = 0;
        -:   29:
        -:   30:    // kingdom cards
        1:   31:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   32:               remodel, smithy, village, baron, great_hall};
        1:   33:    int seed = 2000;
        -:   34:    struct gameState state;
        -:   35:
        1:   36:    printf("Testing -> shuffle()\n");
        1:   37:    memset(&state,23,sizeof(struct gameState));
        1:   38:    initializeGame(numbPlayers, k, seed, &state);
        -:   39:
        1:   40:    state.deckCount[player] = 0;
        1:   41:    printf("\nPlayer deck count is 0\n");
        1:   42:    assertTrue(shuffle(player,&state),-1);
        -:   43:
        1:   44:    printf("\nPlayer deck count is 10 before and after shuffle\n");
        1:   45:    state.deckCount[player] = 10;
        1:   46:    shuffle(player,&state);
        1:   47:    assertTrue(state.deckCount[player],10);
        -:   48:
        1:   49:    printf("\nCards are shuffled\n");
        1:   50:    int pre_shuffle_card = state.deck[player][0];
        1:   51:    shuffle(player,&state);
        1:   52:    int post_shuffle_card = state.deck[player][0];
        1:   53:    if (pre_shuffle_card != post_shuffle_card) {
        1:   54:        assertTrue(1,1);
        -:   55:    }
        -:   56:    else {
    #####:   57:        assertTrue(0,1);
        -:   58:    }
        -:   59:
        1:   60:    if (failureCount) {
    #####:   61:        printf("\nTEST FAILED\n");
    #####:   62:        printf("Fails: %d\n",failureCount);
        -:   63:    }
        -:   64:    else {
        1:   65:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   66:    }
        -:   67:
        1:   68:    return 0;
        -:   69:}
