        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// unittest1.c 
        -:    2:// This tests the updateCoins() function 
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:
        -:   11:// global count of test failures
        -:   12:int failureCount = 0;
        -:   13:
        -:   14:// my own assertTrue function - this checkes if two ints are equal or not
        6:   15:void assertTrue(int a, int b) {
        6:   16:    if (a == b) {
        6:   17:        printf("Test: SUCCESSFULLY COMPLETED\n");
        -:   18:    }
        -:   19:    else {
    #####:   20:        printf("Test: FAILED\n");
    #####:   21:        failureCount++;
        -:   22:    }
        6:   23:}
        -:   24:
        -:   25:// runs the tests
        1:   26:int main () {
        -:   27:    int i, b;
        1:   28:    int numbPlayers = 2;
        1:   29:    int player = 0;
        -:   30:
        -:   31:    // kingdom cards
        1:   32:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   33:               remodel, smithy, village, baron, great_hall};
        1:   34:    int seed = 2000;
        -:   35:    struct gameState state;
        -:   36:    int handCount;
        1:   37:    int bonus = 1;
        -:   38:
        -:   39:    int coppers[MAX_HAND];
        -:   40:    int silvers[MAX_HAND];
        -:   41:    int golds[MAX_HAND];
        -:   42:
        -:   43:    // arrays full of designated treasure
      501:   44:    for (i = 0; i < MAX_HAND; i++) {
      500:   45:        coppers[i] = copper;
      500:   46:        silvers[i] = silver;
      500:   47:        golds[i] = gold;
        -:   48:    }
        -:   49:
        1:   50:    printf("Testing -> updateCoins()");
        -:   51:
        -:   52:    // test how updateCoins handles each treasure and a different bonus and hand count
        3:   53:    for (handCount = 0; handCount <= 5; handCount = handCount + 5) {
        2:   54:        printf("\n\nTreasure cards: %d\n",handCount);
        2:   55:        printf("Bonus: %d\n", bonus);
        -:   56:
        2:   57:        memset(&state,23,sizeof(struct gameState));
        2:   58:        b = initializeGame(numbPlayers, k, seed, &state);
        2:   59:        state.handCount[player] = handCount;
        -:   60:
        -:   61:        // fill hand with all coppers
        2:   62:        memcpy(state.hand[player],coppers,sizeof(int)*handCount);
        2:   63:        updateCoins(player,&state,bonus);
        -:   64:
        2:   65:        printf("\nCoin Count - copper\n");
        2:   66:        printf("Actual: %d\n",state.coins);
        2:   67:        printf("Expected: %d\n",handCount*1+bonus);
        -:   68:
        2:   69:        assertTrue(state.coins,handCount*1+bonus);
        -:   70:
        -:   71:        // fill hand with all silvers
        2:   72:        memcpy(state.hand[player],silvers,sizeof(int)*handCount);
        2:   73:        updateCoins(player,&state,bonus);
        -:   74:
        2:   75:        printf("\nCoin Count - silver\n");
        2:   76:        printf("Actual: %d\n",state.coins);
        2:   77:        printf("Expected: %d\n",handCount*2+bonus);
        -:   78:
        2:   79:        assertTrue(state.coins,handCount*2+bonus);
        -:   80:
        -:   81:        // fill hand with all golds
        2:   82:        memcpy(state.hand[player],golds,sizeof(int)*handCount);
        2:   83:        updateCoins(player,&state,bonus);
        -:   84:
        2:   85:        printf("\nCoin Count - gold\n");
        2:   86:        printf("Actual: %d\n",state.coins);
        2:   87:        printf("Expected: %d\n",handCount*3+bonus);
        -:   88:
        2:   89:        assertTrue(state.coins,handCount*3+bonus);
        -:   90:
        2:   91:        bonus = bonus + 2;
        -:   92:    }
        -:   93:
        1:   94:    if (failureCount) {
    #####:   95:        printf("\nTEST FAILED\n");
    #####:   96:        printf("Fails: %d\n",failureCount);
        -:   97:    }
        -:   98:    else {
        1:   99:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:  100:    }
        -:  101:
        1:  102:    return 0;
        -:  103:}
