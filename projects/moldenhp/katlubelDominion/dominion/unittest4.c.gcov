        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// unittest4.c 
        -:    2:// This tests the gainCard() function 
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:
        -:   11:// global count of test failures
        -:   12:int failureCount = 0;
        -:   13:
        -:   14:// my own assertTrue function - this checkes if two ints are equal or not
        5:   15:void assertTrue(int a, int b) {
        5:   16:    if (a == b) {
        5:   17:        printf("Test: SUCCESSFULLY COMPLETED\n");
        -:   18:    }
        -:   19:    else {
    #####:   20:        printf("Test: FAILED\n");
    #####:   21:        failureCount++;
        -:   22:    }
        5:   23:}
        -:   24:
        -:   25:// runs the tests
        1:   26:int main () {
        -:   27:    // kingdom cards
        1:   28:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   29:               remodel, smithy, village, baron, great_hall};
        1:   30:    int seed = 2000;
        -:   31:    struct gameState state;
        -:   32:
        1:   33:    printf("Testing -> gainCard()\n");
        1:   34:    memset(&state,23,sizeof(struct gameState));
        1:   35:    initializeGame(2, k, seed, &state);
        -:   36:
        1:   37:    printf("\nGold supply pile is empty\n");
        1:   38:    state.supplyCount[gold] = 0;
        1:   39:    assertTrue(gainCard(gold,&state,0,0),-1);
        1:   40:    state.supplyCount[gold] = 30;
        -:   41:
        1:   42:    printf("\nAdd card to deck\n");
        1:   43:    int deckCount = state.deckCount[0];
        1:   44:    gainCard(gold,&state,1,0);
        1:   45:    assertTrue(deckCount+1,state.deckCount[0]);
        -:   46:
        1:   47:    printf("\nAdd card to hand\n");
        1:   48:    int handCount = state.handCount[0];
        1:   49:    gainCard(gold,&state,2,0);
        1:   50:    assertTrue(handCount+1,state.handCount[0]);
        -:   51:
        1:   52:    printf("\nAdd card to discard pile\n");
        1:   53:    int discardCount = state.discardCount[0];
        1:   54:    gainCard(gold,&state,0,0);
        1:   55:    assertTrue(discardCount+1,state.discardCount[0]);
        -:   56:
        1:   57:    printf("\nDecrease gold supply\n");
        1:   58:    int goldSupply = state.supplyCount[gold];
        1:   59:    gainCard(gold,&state,0,0);
        1:   60:    assertTrue(goldSupply-1,state.supplyCount[gold]);
        -:   61:
        1:   62:    if (failureCount) {
    #####:   63:        printf("\nTEST FAILED\n");
    #####:   64:        printf("Fails: %d\n",failureCount);
        -:   65:    }
        -:   66:    else {
        1:   67:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   68:    }
        -:   69:
        1:   70:    return 0;
        -:   71:}
